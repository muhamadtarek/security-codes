class AES:
    # Rijndael S-box
    s_box = [
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    ]

    # Rijndael Inverse S-box
    rs_box = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
    ]

    # Round constant word array
    rcon = [
        [0x01, 0x00, 0x00, 0x00],
        [0x02, 0x00, 0x00, 0x00],
        [0x04, 0x00, 0x00, 0x00],
        [0x08, 0x00, 0x00, 0x00],
        [0x10, 0x00, 0x00, 0x00],
        [0x20, 0x00, 0x00, 0x00],
        [0x40, 0x00, 0x00, 0x00],
        [0x80, 0x00, 0x00, 0x00],
        [0x1B, 0x00, 0x00, 0x00],
        [0x36, 0x00, 0x00, 0x00],
        [0x6C, 0x00, 0x00, 0x00],
        [0xD8, 0x00, 0x00, 0x00],
        [0xAB, 0x00, 0x00, 0x00],
        [0x4D, 0x00, 0x00, 0x00],
        [0x9A, 0x00, 0x00, 0x00],
        [0x2F, 0x00, 0x00, 0x00],
        [0x5E, 0x00, 0x00, 0x00],
        [0xBC, 0x00, 0x00, 0x00],
        [0x63, 0x00, 0x00, 0x00],
        [0xC6, 0x00, 0x00, 0x00],
        [0x97, 0x00, 0x00, 0x00],
        [0x35, 0x00, 0x00, 0x00],
        [0x6A, 0x00, 0x00, 0x00],
        [0xD4, 0x00, 0x00, 0x00],
        [0xB3, 0x00, 0x00, 0x00],
        [0x7D, 0x00, 0x00, 0x00],
        [0xFA, 0x00, 0x00, 0x00],
        [0xEF, 0x00, 0x00, 0x00],
        [0xC5, 0x00, 0x00, 0x00],
        [0x91, 0x00, 0x00, 0x00],
        [0x39, 0x00, 0x00, 0x00],
        [0x72, 0x00, 0x00, 0x00],
        [0xE4, 0x00, 0x00, 0x00],
        [0xD3, 0x00, 0x00, 0x00],
        [0xBD, 0x00, 0x00, 0x00],
        [0x61, 0x00, 0x00, 0x00],
        [0xC2, 0x00, 0x00, 0x00],
        [0x9F, 0x00, 0x00, 0x00],
        [0x25, 0x00, 0x00, 0x00],
        [0x4A, 0x00, 0x00, 0x00],
        [0x94, 0x00, 0x00, 0x00],
        [0x33, 0x00, 0x00, 0x00],
        [0x66, 0x00, 0x00, 0x00],
        [0xCC, 0x00, 0x00, 0x00],
        [0x83, 0x00, 0x00, 0x00],
        [0x1D, 0x00, 0x00, 0x00],
        [0x3A, 0x00, 0x00, 0x00],
        [0x74, 0x00, 0x00, 0x00],
        [0xE8, 0x00, 0x00, 0x00],
        [0xCB, 0x00, 0x00, 0x00],
        [0x8D, 0x00, 0x00, 0x00],
    ]

    def __init__(self, key):
        self.key = key
        self.Nb = 4  # Number of columns (32-bit words) comprising the State. For AES, this is always 4.
        self.Nk = len(key) // 4  # Key length in 32-bit words. 4 words for AES-128, 6 words for AES-192, 8 words for AES-256.
        self.Nr = 10  # Number of rounds. 10 rounds for AES-128, 12 rounds for AES-192, 14 rounds for AES-256.
        self.w = self.key_expansion(key)

    def gmul(self, a, b):
        p = 0
        for counter in range(8):
            if b & 1:
                p ^= a
            carry = a & 0x80
            a <<= 1
            if carry:
                a ^= 0x1b
            b >>= 1
        return p % 256
    
    def key_expansion(self, key):
        def sub_word(word):
            return [self.s_box[b] for b in word]

        def rot_word(word):
            return word[1:] + word[:1]

        def coef_add(a, b):
            return [a[i] ^ b[i] for i in range(4)]
    
        key_symbols = len(key)
        if key_symbols == 16:  # AES-128
            self.Nr = 10
            self.Nk = 4
        else:
            raise ValueError("Invalid key size")

        key_size = self.Nb * (self.Nr + 1)
        w = [0] * key_size

        # Initial copy of key
        for i in range(self.Nk):
            w[i] = [key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]]

        # Key expansion
        for i in range(self.Nk, key_size):
            temp = w[i - 1]
            if i % self.Nk == 0:
                temp = sub_word(rot_word(temp))
                temp = coef_add(temp, self.rcon[i // self.Nk - 1])
            elif self.Nk > 6 and i % self.Nk == 4:
                temp = sub_word(temp)
            w[i] = coef_add(w[i - self.Nk], temp)

        return w

    def sub_bytes(self, state):
        return [self.s_box[byte] for byte in state]

    def inv_sub_bytes(self, state):
        return [self.rs_box[byte] for byte in state]

    def shift_rows(self, state):
        return [
            state[0], state[5], state[10], state[15],
            state[4], state[9], state[14], state[3],
            state[8], state[13], state[2], state[7],
            state[12], state[1], state[6], state[11],
        ]

    def inv_shift_rows(self, state):
        return [
            state[0], state[13], state[10], state[7],
            state[4], state[1], state[14], state[11],
            state[8], state[5], state[2], state[15],
            state[12], state[9], state[6], state[3],
        ]

    def mix_columns(self, state):
        columns = [state[i:i + 4] for i in range(0, len(state), 4)]
        mixed_columns = []
        for col in columns:
            mixed_columns.append([
                self.gmul(col[0], 2) ^ self.gmul(col[1], 3) ^ col[2] ^ col[3],
                col[0] ^ self.gmul(col[1], 2) ^ self.gmul(col[2], 3) ^ col[3],
                col[0] ^ col[1] ^ self.gmul(col[2], 2) ^ self.gmul(col[3], 3),
                self.gmul(col[0], 3) ^ col[1] ^ col[2] ^ self.gmul(col[3], 2)
            ])
        return [val for sublist in mixed_columns for val in sublist]

    def inv_mix_columns(self, state):
        columns = [state[i:i + 4] for i in range(0, len(state), 4)]
        mixed_columns = []
        for col in columns:
            mixed_columns.append([
                self.gmul(col[0], 14) ^ self.gmul(col[1], 11) ^ self.gmul(col[2], 13) ^ self.gmul(col[3], 9),
                self.gmul(col[0], 9) ^ self.gmul(col[1], 14) ^ self.gmul(col[2], 11) ^ self.gmul(col[3], 13),
                self.gmul(col[0], 13) ^ self.gmul(col[1], 9) ^ self.gmul(col[2], 14) ^ self.gmul(col[3], 11),
                self.gmul(col[0], 11) ^ self.gmul(col[1], 13) ^ self.gmul(col[2], 9) ^ self.gmul(col[3], 14)
            ])
        return [val for sublist in mixed_columns for val in sublist]

    def add_round_key(self, state, round_key):
        # Flatten the round_key list of lists into a single list
        flat_round_key = [item for sublist in round_key for item in sublist]
        return [state[i] ^ flat_round_key[i] for i in range(len(state))]

    def encrypt_block(self, block):
        if len(block) != 16:
            raise ValueError("Block size must be 128 bits")

        state = list(block)  # Convert byte array to list of integers
        state = self.add_round_key(state, self.w[0:self.Nb])

        for round in range(1, self.Nr):
            state = self.sub_bytes(state)
            state = self.shift_rows(state)
            state = self.mix_columns(state)
            state = self.add_round_key(state, self.w[self.Nb * round: self.Nb * (round + 1)])

        state = self.sub_bytes(state)
        state = self.shift_rows(state)
        state = self.add_round_key(state, self.w[self.Nb * self.Nr:])

        return bytes(state)  # Convert back to byte array

    def decrypt_block(self, block):
        if len(block) != 16:
            raise ValueError("Block size must be 128 bits")

        state = list(block)  # Convert byte array to list of integers
        state = self.add_round_key(state, self.w[self.Nb * self.Nr:])

        for round in range(self.Nr - 1, 0, -1):
            state = self.inv_shift_rows(state)
            state = self.inv_sub_bytes(state)
            state = self.add_round_key(state, self.w[self.Nb * round: self.Nb * (round + 1)])
            state = self.inv_mix_columns(state)

        state = self.inv_shift_rows(state)
        state = self.inv_sub_bytes(state)
        state = self.add_round_key(state, self.w[0:self.Nb])

        return bytes(state)  # Convert back to byte array


    def validate_key(self, key):
        if len(key) != 16:
            raise ValueError("Key size must be 16 bytes (128 bits).")

    def pad(self, block):
        padding_len = 16 - len(block)
        return block + bytes([padding_len] * padding_len)

    def unpad(self, block):
        padding_len = block[-1]
        return block[:-padding_len]

    def process_text(self, text, mode='encrypt'):
        if mode == 'encrypt':
            text_bytes = text.encode()
            padded_text = [self.pad(text_bytes[i:i + 16]) for i in range(0, len(text_bytes), 16)]
        else:  # decrypt
            text_bytes = bytes.fromhex(text)
            padded_text = [text_bytes[i:i + 16] for i in range(0, len(text_bytes), 16)]

        processed_blocks = []
        for block in padded_text:
            if mode == 'encrypt':
                processed_blocks.append(self.encrypt_block(block))
            else:  # decrypt
                processed_blocks.append(self.decrypt_block(block))

        if mode == 'decrypt':
            processed_blocks[-1] = self.unpad(processed_blocks[-1])
            return b''.join(processed_blocks).decode()
        else:
            return ''.join([b.hex() for b in processed_blocks])

# Usage Example
while True:
    try:
        key_input = input("Enter a 16-byte (128-bit) key in hexadecimal: ")
        key = bytes.fromhex(key_input)
        aes = AES(key)
        aes.validate_key(key)  # Validate the key length
        break  # Break the loop if the key is valid
    except ValueError as e:
        print(e)
        print("Please enter a valid key.")

plaintext = input("Enter plaintext: ")
ciphertext = aes.process_text(plaintext, mode='encrypt')
print(ciphertext)
decrypted = aes.process_text(ciphertext, mode='decrypt')
print(decrypted)